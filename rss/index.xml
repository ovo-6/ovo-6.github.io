<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ovo6 blog]]></title><description><![CDATA[my own blog]]></description><link>https://ovo-6.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sat, 18 Mar 2017 20:03:42 GMT</lastBuildDate><atom:link href="https://ovo-6.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Spring Boot Test]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>When we start to explore Spring Boot we cannot leave behind test features of Spring Boot application.
Because Spring Boot is embedded with web server we can leverage that in integration testing.</p>
</div>
<div class="paragraph">
<p>First we need to include support for test in pom.xml:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
   &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then we annotate our test with <code>@RunWith(SpringRunner.class)</code> and <code>@SpringBootTest(webEnvironment= SpringBootTest.WebEnvironment.RANDOM_PORT)</code> annotations. It will start embedded tomcat on random port to avoid collision with other service and run tests.</p>
</div>
<div class="paragraph">
<p>For our integration testing of REST API we can use <code>TestRestTemplate</code> bean that will connect to the right port of Spring Boot application started before tests. Then you can test functionality by verifying HTTP responses.</p>
</div>
<div class="paragraph">
<p>When using JPA ORM provider like Hibernate we can use in-memory database for tests by using  <code>@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)</code> annotation. This way we speed up tests and we won&#8217;t overwrite our production database.</p>
</div>
<div class="paragraph">
<p>We also need to include our H2 dependency in pom.xml:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;com.h2database&lt;/groupId&gt;
   &lt;artifactId&gt;h2&lt;/artifactId&gt;
   &lt;version&gt;1.4.191&lt;/version&gt;
   &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The test would look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment= SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
public class RestLoginTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    public void testAdmin() {
        AccountCredentials admin = new AccountCredentials();
        admin.setUsername("admin");
        admin.setPassword("admin");

        ResponseEntity&lt;String&gt; response = this.restTemplate.postForEntity("/login", admin, String.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Example code can be seen in this test: <a href="https://github.com/ovo-6/samples/blob/master/expenses/src/test/java/com/ovo6/expenses/integration/RestLoginTest.java" class="bare">https://github.com/ovo-6/samples/blob/master/expenses/src/test/java/com/ovo6/expenses/integration/RestLoginTest.java</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Boot Test module provides nice features that simplifies testing of spring boot application and I found it very useful.</p>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/03/18/Spring-Boot-Test.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/03/18/Spring-Boot-Test.html</guid><category><![CDATA[java]]></category><category><![CDATA[ spring]]></category><category><![CDATA[ spring boot]]></category><category><![CDATA[ testing]]></category><pubDate>Sat, 18 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Lombok]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>There are not many java libraries that would elegantly solve some major shortcomings of java programs, but <a href="https://projectlombok.org">project lombok</a> is one of them.</p>
</div>
<div class="paragraph">
<p>It provides set of useful annotations solving different set of problems but common theme is to reduce <a href="https://en.wikipedia.org/wiki/Boilerplate_code">boiler plate code</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_setup">Setup</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We need to add maven dependency:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" data-lang="html">&lt;dependency&gt;
   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
   &lt;artifactId&gt;lombok&lt;/artifactId&gt;
   &lt;version&gt;1.16.12&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Also if we use features that are adding new methods to objects we need to install IDE plugin, in my case for <a href="https://plugins.jetbrains.com/idea/plugin/6317-lombok-plugin">IDEA</a>.</p>
</div>
<div class="paragraph">
<p>Now we can use of benefits new lombok annotations it provides.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__notnull">@NotNull</h2>
<div class="sectionbody">
<div class="paragraph">
<p>One of great annotations to reduce boilerplate is to reduce null checks in every method that requires input that is not null.</p>
</div>
<div class="paragraph">
<p>We can do it like this with lombok:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Person {
    private String name;

    public void setFirstNameLastName(@NonNull  String firstName, @NonNull String lastName ) {
        this.name = firstName + " " + lastName;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now when we call the method with some of arguments <code>null</code> it will throw runtime exception with argument name:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-txt" data-lang="txt">Exception in thread "main" java.lang.NullPointerException: firstName
at com.ovo.domain.Person.setFirstNameLastName(Person.java:13)</code></pre>
</div>
</div>
<div class="paragraph">
<p>We don&#8217;t have to mess with null checks. Code can be clean and we reduce possibility to introduce bug in out null checks. There are other options in java how to do the same but lombok does it in nice and clean way.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__data_and_related">@Data and related</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When we annotate class with <code>@Data</code> annotation it effectively adds other lombok annotations:  <code>@Getter</code>, <code>@Setter</code>, <code>@ToString</code>, <code>@EqualsAndHashCode</code> and <code>@RequiredArgsConstructor</code>.
Basically it enables you to write java classes with fields only and getters and setters for all fields, <code>toString()</code>, <code>equals()</code> and <code>hashCode()</code> methods are automatically generated.</p>
</div>
<div class="paragraph">
<p>Consider this class:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@Data
public class Person {
    private final Long id;
    private String name;
    private Person manager;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Due to <code>@RequiredArgsConstructor</code> all <code>final</code> fields are part of constructor so you will crate instance with <code>id</code> argument like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">Person joe = new Person(456L);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then we have setters for <code>name</code> and <code>manager</code> fields:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">joe.setName("joe");
joe.setManager(manager);
System.out.println(joe);</code></pre>
</div>
</div>
<div class="paragraph">
<p>And finally we have <code>toString()</code> that will produce by default this output:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-txt" data-lang="txt">Person(id=456, name=joe, manager=Person(id=123, name=boss, manager=null))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Also we have implementation of <code>equals()</code> and <code>hashCode()</code> using all fields.</p>
</div>
<div class="paragraph">
<p>If we are not happy what fields got included into previously mentioned generated methods lombok has configuration options to exclude unwanted fields and further control behaviour.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__builder">@Builder</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Another great feature is possibility of creating builders with <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a>.</p>
</div>
<div class="paragraph">
<p>We just annotate our pojo class:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@Data
@Builder
public class Team {
    private String name;
    @Singular private List&lt;Person&gt; members;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then we can build our instance:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">Team team = Team.builder().name("A Team").member(new Person(1L)).member(new Person(2L)).build();</code></pre>
</div>
</div>
<div class="paragraph">
<p>There is one special annotation - <code>@Singular</code> that enables adding entries to collection by subsequent calls to the same method. Nice :)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_logging">Logging</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lombok also provides shorthand annotations for defining static loggers in class by family of annotations <code>@Log</code>, <code>@Slf4j</code> and others depending on logging implementation to be used. The benefit there is not so huge but it lets you to replace one line with another and you don&#8217;t have to worry about how exacly is static logger created.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lombok is nice library and it is worth using even when you use only one annotation from it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_references">References</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Offical pages - <a href="https://projectlombok.org" class="bare">https://projectlombok.org</a></p>
</li>
<li>
<p>Sample app showing usage - <a href="https://github.com/ovo-6/samples/tree/master/lombok" class="bare">https://github.com/ovo-6/samples/tree/master/lombok</a></p>
</li>
<li>
<p>IntelliJ IDEA plugin - <a href="https://plugins.jetbrains.com/idea/plugin/6317-lombok-plugin" class="bare">https://plugins.jetbrains.com/idea/plugin/6317-lombok-plugin</a></p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/02/20/Lombok.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/02/20/Lombok.html</guid><category><![CDATA[java]]></category><category><![CDATA[ lombok]]></category><pubDate>Mon, 20 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[React]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>React is library from Facebook that enables building component based UI. From the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a> it represents View only. The name may suggest it has something to do with <a href="http://www.reactivemanifesto.org/">reactive programming</a> but it has nothing to do with it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_example_program">Example Program</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Simplest way to get started is to link javascript libraries directly in html page.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" data-lang="html">&lt;script src="https://unpkg.com/react@15.3.0/dist/react.js"&gt;&lt;/script&gt;
&lt;script src="https://unpkg.com/react-dom@15.3.0/dist/react-dom.js"&gt;&lt;/script&gt;
&lt;script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then in our page we&#8217;ll have some div element to which we will render our react application.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" data-lang="html">&lt;body&gt;
   &lt;div id="content"&gt;&lt;/div&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we create main react component called <code>App</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-babel" data-lang="babel">class App extends React.Component {

       constructor(props) {
            super(props);
            this.state = {questions: []};
        }

        render() {
            return (
            	&lt;Questions data={this.state.questions}/&gt;
            )
        }
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>The most important is <code>render()</code> method that returns result of rendering of our component. It is in JSX language which some kind of combination of HTML and javascript. This code returns another React component called <code>Questions</code> and it has some input data passed into it. In this case we don&#8217;t have any data, we didn&#8217;t implement fetching yet.</p>
</div>
<div class="paragraph">
<p>When we have our main component we can render it to our div  wth id = "content".</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-babel" data-lang="babel">ReactDOM.render(
   &lt;App /&gt;,
   document.getElementById('content')
);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Of course we would have to implement also <code>Questions</code> component, but you can see the concept of composing components in React. You can see full implementation of <code>Questions</code> in git repo of <a href="https://github.com/ovo-6/samples/blob/master/poll-spring-boot-react/resources/static/index.html">sample application</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_binding_data">Binding data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Actually populating data into React component is not in the scope of this library. We can do it in many ways, usually by using other libraries like Redux or Flux or we can fetch it simply by jQuery ajax call. I&#8217;ll do it by jQuery and maybe in some other article I&#8217;ll dive in the other ways.</p>
</div>
<div class="paragraph">
<p>So I&#8217;ll enhance <code>App</code> class with method <code>loadQuestions()</code> that will be called upon mounting component:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-babel" data-lang="babel">class App extends React.Component {

       constructor(props) {
            super(props);
            this.state = {questions: []};
        }

        loadQuestions() {
            var self = this;
            $.ajax({
                url: "/questions"
            }).then(function (data) {
                self.setState({questions: data});
            });
        }

        componentDidMount() {
            this.loadQuestions();
        }

        render() {
            return (
            	&lt;Questions data={this.state.questions}/&gt;
            )
        }
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>The method will use jQuery ajax call to <code>/questions</code> rest endpoint returning json data and the result is then saved to internal state of component under <code>questions</code> key. Later this is passed in <code>render()</code> method to <code>Questions</code> react component, that should know how to handle this data.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This library enables creating loosely coupled reusable UI components. It&#8217;s not clear how contracts work between components though. Disadvantage is that you need to employ other library to get data populated to react components.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resources">Resources</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Sample application - <a href="https://github.com/ovo-6/samples/blob/master/poll-spring-boot-react/resources/static/index.html" class="bare">https://github.com/ovo-6/samples/blob/master/poll-spring-boot-react/resources/static/index.html</a></p>
</li>
<li>
<p>React Offical Documentation - <a href="https://facebook.github.io/react/" class="bare">https://facebook.github.io/react/</a></p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/02/16/React.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/02/16/React.html</guid><category><![CDATA[ui]]></category><category><![CDATA[ react]]></category><pubDate>Thu, 16 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Go]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Go is new programming language created by Google. Because it runs fast and creates small single executable files with all dependencies inside it is ideal for microservices in docker containers.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_example_program">Example Program</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s go straight to the business and create some service providing list of users as json:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-go" data-lang="go">package main

import (
    "fmt"
    "net/http"
    "encoding/json"
)

type User struct {
    Id int
    Name string
    Email string
    password string // first char lowercase -&gt; not visible from outside
}

var users [3]User // global variable - array with 3 users

func handler(w http.ResponseWriter, r *http.Request) {
    b, _ := json.Marshal(users)
    fmt.Fprintf(w, string(b))
}

func main() {
    users[0] = User{1, "joe", "joe@yahoo.com", "xyz"}
    users[1] = User{2, "mike", "mike@gmail.com", "xyz"}
    users[2] = User{3, "frank", "frank@email.com", "xyz"}

    http.HandleFunc("/users", handler) // assign function `handler` to serve requests for `/users`
    http.ListenAndServe(":8086", nil) // start server on port 8086
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When we save this to file named <code>main.go</code> and run it by command <code>go run main.go</code> it will start serving requests.</p>
</div>
<div class="paragraph">
<p>Now we can simply go to <code><a href="http://localhost:8086/users" class="bare">http://localhost:8086/users</a></code> and we should see our arrays of users serialized to json:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>[{"Id":1,"Name":"joe","Email":"joe@yahoo.com"},{"Id":2,"Name":"mike","Email":"mike@gmail.com"},{"Id":3,"Name":"frank","Email":"frank@email.com"}]</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_go_feaures">Go Feaures</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>statically typed language - compiler can check types (like in Java)</p>
</li>
<li>
<p>go routines - simple way how to provide concurrency</p>
</li>
<li>
<p>functions can return multiple values</p>
</li>
<li>
<p>array slices - we don&#8217;t work with whole arrays but only subparts called slices</p>
</li>
<li>
<p><code>go test</code> - run all tests - functions starting with <code>Test</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>After one day of playing with Go it looks promising with some nice language features. Question is whether user comunity will create enough libraries since the language is still quite new. Also it would be nice to measure performance between Go and let say Java microservice if learning new language is worth it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_references">References</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Official Pages - <a href="https://golang.org/" class="bare">https://golang.org/</a></p>
</li>
<li>
<p>Source of this example - <a href="https://github.com/ovo-6/samples/blob/master/go/src/gowiki/users.go" class="bare">https://github.com/ovo-6/samples/blob/master/go/src/gowiki/users.go</a></p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/02/04/Go.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/02/04/Go.html</guid><category><![CDATA[go]]></category><category><![CDATA[ golang]]></category><pubDate>Sat, 04 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Spring Data]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data is library that simplifies work with data storage. I&#8217;ll focus on JPA repository features.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_adding_to_project">Adding to project</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When using Spring Boot we can simply add dependency on Spring Data and JPA:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dynamic_query_derivation_from_repository_method_names">Dynamic query derivation from repository method names</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When we create repository that extends from <code>JpaRepository</code> or <code>CrudRepository</code> (non JPA) we inherit all the basic operations for creating, updating and deleting.
Beside that we can create method in this interface and based on method name Spring Data framework will generate JPA query.</p>
</div>
<div class="paragraph">
<p>Take this example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface AnswerRepository extends JpaRepository&lt;Answer, Integer&gt; {

    List&lt;Answer&gt; findByQuestion(Question question);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Framework identifies <code>findBy{Fieldname}</code> method using camel-case and creates automatically implementation for this interface method.
It will generate something like this HQL query <code>SELECT * from Answer join Question q where q.id = :questionId</code>, where <code>questionId</code> is taken from input parameter as <code>question.getId()</code>.</p>
</div>
<div class="paragraph">
<p>Also it provides features like sorting and paging out of the box. You only add additional parameter <code>Pageable</code> or <code>Sort</code> in your method signature.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    List&lt;Answer&gt; findByQuestion(Question question, Pageable pageable);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can filter by multiple fields, do ingore-case search and other stuff as described in <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html">documentation</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_support_for_transparent_auditing_created_last_changed">Support for transparent auditing (created, last changed)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To enable auditing you just add this one annotation to your config class <code>@EnableJpaAuditing</code>.</p>
</div>
<div class="paragraph">
<p>Then you can annotate field by one of <code>@CreatedBy</code>, <code>@LastModifiedBy</code> to capture the user who created or modified the entity
or use <code>@CreatedDate</code> or <code>@LastModifiedDate</code> to capture the point in time this happened.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_references">References</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Documentation - <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html" class="bare">https://docs.spring.io/spring-data/jpa/docs/current/reference/html</a></p>
</li>
<li>
<p>Sample Implementation - <a href="https://github.com/ovo-6/samples/blob/master/poll-spring-boot-react/src/com/ovo6/poll/repo/AnswerRepository.java" class="bare">https://github.com/ovo-6/samples/blob/master/poll-spring-boot-react/src/com/ovo6/poll/repo/AnswerRepository.java</a></p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/01/31/Spring-Data.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/01/31/Spring-Data.html</guid><category><![CDATA[java]]></category><category><![CDATA[ spring]]></category><category><![CDATA[ spring data]]></category><pubDate>Tue, 31 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Spring Boot]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Spring Boot is framework that makes it super easy to setup and run a java spring application. It makes all neccessary configurations by using default implementations for all parts of application:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Application Configuration</p>
</li>
<li>
<p>JPA implementation - Hibernate including transaction management, &#8230;&#8203; etc.</p>
</li>
<li>
<p>Tempating engine</p>
</li>
<li>
<p>&#8230;&#8203; and more</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This concept is called <strong>Convention over Configuration</strong>.
Of course these defaults can be easily re-configured.</p>
</div>
<div class="paragraph">
<p>On top of that we get embedded Tomcat (or other) server to easily run our web app - as easily as <code>java -jar app.jar</code> or <code>mvn spring-boot:run</code>. Also there are some options for monitoring in production.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_setup">Setup</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To setup Spring Boot in our application using maven we need these steps:</p>
</div>
<div class="sect2">
<h3 id="_1_setup_parent_pom">1. Setup parent POM</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;
&lt;/parent&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>From now on you can use everything from Spring Core e.g <code>@Autowired</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_2_add_entrypoint">2. Add entrypoint</h3>
<div class="paragraph">
<p>Now for Spring Boot to setup all configurations for all dependencies use application entry point with <code>@SpringBootApplication</code> annotation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now Spring Boot is setup and your application would start.</p>
</div>
</div>
<div class="sect2">
<h3 id="_3_add_web_dependency_in_pom">3. Add web dependency in POM</h3>
<div class="paragraph">
<p>If our application will use web we can add dependency on Spring MVC:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then you can create right away Controller e.g. <code>@RestController</code> with <code>@RequestMapping</code> methods to create REST API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@RestController
public class QuestionController {

    @RequestMapping("/questions/{id}")
    Question getQuestion(@PathVariable Integer id) {
        return new Question(id);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When application starts it will start immediately serving this REST API with embedded Tomcat at this address:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">http://localhost:8080/questions/12</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_4_add_persistence_dependency_in_pom">4. Add persistence dependency in POM</h3>
<div class="paragraph">
<p>Usually we need some persistence so we can add dependency on Spring Data and JPA:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we create our model with JPA annotations as usual. All these <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>, &#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>We also have included Spring Data by this dependency so we can start using it with all features it provides. We can create reporitory only by providing this interface:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface QuestionRepository extends JpaRepository&lt;Question, Integer&gt; {}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Yes that&#8217;s right no methods, no implementation, everything will be setup by Spring Data library. We would just autowire it and start using it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@RestController
public class QuestionController {

    @Autowired
    QuestionRepository repo;

    @RequestMapping("/questions")
    @JsonView(QuestionListView.class)
    List&lt;Question&gt; getAll() {
        return repo.findAll();
    }

    @RequestMapping("/questions/{id}")
    Question getQuestion(@PathVariable Integer id) {
        return repo.findOne(id);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Last step is to add maven dependency to our DB driver and provide datasource properties for connection to DB.</p>
</div>
<div class="paragraph">
<p>And that&#8217;s all, we have working persistence with minimal effort.</p>
</div>
<div class="paragraph">
<p>Whole application code is available at gihub: <a href="https://github.com/ovo-6/samples/tree/master/poll-spring-boot-react" class="bare">https://github.com/ovo-6/samples/tree/master/poll-spring-boot-react</a></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For quick development java application using Spring, for creating POCs, anywhere you need quick start this is great framework.</p>
</div>
<div class="paragraph">
<p>Questions is whether it is still usable for more complicated projects where we want to override large number of parts.</p>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/01/25/Spring-Boot.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/01/25/Spring-Boot.html</guid><category><![CDATA[java]]></category><category><![CDATA[ spring]]></category><category><![CDATA[ spring boot]]></category><pubDate>Wed, 25 Jan 2017 00:00:00 GMT</pubDate></item></channel></rss>