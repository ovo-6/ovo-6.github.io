<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ovo6 blog]]></title><description><![CDATA[my own blog]]></description><link>https://ovo-6.github.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 26 Jan 2017 14:59:27 GMT</lastBuildDate><atom:link href="https://ovo-6.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Spring Boot]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Spring Boot is framework that makes it super easy to setup and run a java spring application. It makes all neccessary configurations by using default implementations for all parts of application:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Application Configuration</p>
</li>
<li>
<p>JPA implementation - Hibernate including transaction management, &#8230;&#8203; etc.</p>
</li>
<li>
<p>Tempating engine</p>
</li>
<li>
<p>&#8230;&#8203; and more</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This concept is called <strong>Convention over Configuration</strong>.
Of course these defaults can be easily re-configured.</p>
</div>
<div class="paragraph">
<p>On top of that we get embedded Tomcat (or other) server to easily run our web app - as easily as <code>java -jar app.jar</code> or <code>mvn spring-boot:run</code>. Also there are some options for monitoring in production.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_setup">Setup</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To setup Spring Boot in our application using maven we need these steps:</p>
</div>
<div class="sect2">
<h3 id="_1_setup_parent_pom">1. Setup parent POM</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;
&lt;/parent&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>From now on you can use everything from Spring Core e.g <code>@Autowired</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_2_add_entrypoint">2. Add entrypoint</h3>
<div class="paragraph">
<p>Now for Spring Boot to setup all configurations for all dependencies use application entry point with <code>@SpringBootApplication</code> annotation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now Spring Boot is setup and your application would start.</p>
</div>
</div>
<div class="sect2">
<h3 id="_3_add_web_dependency_in_pom">3. Add web dependency in POM</h3>
<div class="paragraph">
<p>If our application will use web we can add dependency on Spring MVC:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then you can create right away Controller e.g. <code>@RestController</code> with <code>@RequestMapping</code> methods to create REST API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@RestController
public class QuestionController {

    @RequestMapping("/questions/{id}")
    Question getQuestion(@PathVariable Integer id) {
        return new Question(id);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When application starts it will start immediately serving this REST API with embedded Tomcat at this address:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">http://localhost:8080/questions/12</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_4_add_persistence_dependency_in_pom">4. Add persistence dependency in POM</h3>
<div class="paragraph">
<p>Usually we need some persistence so we can add dependency on Spring Data and JPA:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we create our model with JPA annotations as usual. All these <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>, &#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>We also have included Spring Data by this dependency so we can start using it with all features it provides. We can create reporitory only by providing this interface:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface QuestionRepository extends JpaRepository&lt;Question, Integer&gt; {}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Yes that&#8217;s right no methods, no implementation, everything will be setup by Spring Data library. We would just autowire it and start using it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@RestController
public class QuestionController {

    @Autowired
    QuestionRepository repo;

    @RequestMapping("/questions")
    @JsonView(QuestionListView.class)
    List&lt;Question&gt; getAll() {
        return repo.findAll();
    }

    @RequestMapping("/questions/{id}")
    Question getQuestion(@PathVariable Integer id) {
        return repo.findOne(id);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Last step is to add maven dependency to our DB driver and provide datasource properties for connection to DB.</p>
</div>
<div class="paragraph">
<p>And that&#8217;s all, we have working persistence with minimal effort.</p>
</div>
<div class="paragraph">
<p>Whole application code is available at gihub: <a href="https://github.com/ovo-6/samples/tree/master/poll-spring-boot-react" class="bare">https://github.com/ovo-6/samples/tree/master/poll-spring-boot-react</a></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For quick development java application using Spring, for creating POCs, anywhere you need quick start this is great framework.</p>
</div>
<div class="paragraph">
<p>Questions is whether it is still usable for more complicated projects where we want to override large number of parts.</p>
</div>
</div>
</div>]]></description><link>https://ovo-6.github.io/2017/01/25/Spring-Boot.html</link><guid isPermaLink="true">https://ovo-6.github.io/2017/01/25/Spring-Boot.html</guid><category><![CDATA[java]]></category><category><![CDATA[ spring boot]]></category><pubDate>Wed, 25 Jan 2017 00:00:00 GMT</pubDate></item></channel></rss>